View(all.dat.p2)
View(deg.dat.p2)
length(rbind(all.dat.p2$node1,all.dat.p2$node2))
length(all.dat.p2$node1)
length(all.dat.p2$node2)
length(all.dat.p2$node1)+length(all.dat.p2$node2)
length(deg.dat.p2$nodes)
g.ba <- sample_pa(100, directed=FALSE)
plot(g.ba, layout=layout_in_circle, vertex.label=NA)
hist(degree(g.ba), col="lightblue", xlab="Degree", ylab="Frequency", main="")
sample_smallworld(1, 25, 5, 0.05)
table(deg.dat.p2$degree)
table(deg.dat.p7$degree)
sample_smallworld(1, 100, 5, 0)
?ample_smallworld
?sample_smallworld
length(deg.dat.p2)
length(deg.dat.p2$nodes)
length(deg.dat.p7$nodes)
length(rbind(deg.dat.p2$nodes,deg.dat.p7$nodes))
length(cbind(deg.dat.p2$nodes,deg.dat.p7$nodes))
deg.dat.p2$nodes
deg.dat.p7$nodes
rbind(deg.dat.p2$nodes,deg.dat.p7$nodes)
dim(deg.dat.p2$nodes)
deg.dat.p2$nodes[1,]
deg.dat.p2$nodes[,1]
tt = rbind(deg.dat.p2$nodes,deg.dat.p7$nodes)
View(tt)
length(tt)
dim(tt)
df.deg.p2 = data.frame(nodes=deg.dat.p2$nodes,degree=deg.dat.p2$nodes,time=2)
head(df.deg.p2,10)
df.deg.p2 = data.frame(nodes=deg.dat.p2$nodes,degree=deg.dat.p2$degree,time=2)
head(df.deg.p2,10)
df.deg.p2 = data.frame(nodes=deg.dat.p2$nodes,degree=deg.dat.p2$degree,time=2)
df.deg.p3 = data.frame(nodes=deg.dat.p3$nodes,degree=deg.dat.p3$degree,time=3)
df.deg.p4 = data.frame(nodes=deg.dat.p4$nodes,degree=deg.dat.p4$degree,time=4)
df.deg.p5 = data.frame(nodes=deg.dat.p5$nodes,degree=deg.dat.p5$degree,time=5)
df.deg.p6 = data.frame(nodes=deg.dat.p6$nodes,degree=deg.dat.p6$degree,time=6)
df.deg.p7 = data.frame(nodes=deg.dat.p7$nodes,degree=deg.dat.p7$degree,time=7)
rbind(df.deg.p2,df.deg.p3,df.deg.p4,df.deg.p5,df.deg.p6,df.deg.p7)
tt = rbind(df.deg.p2,df.deg.p3,df.deg.p4,df.deg.p5,df.deg.p6,df.deg.p7)
dim(tt)
unique(tt$nodes)
length(unique(tt$nodes))
dim(tt$nodes)
dim(tt)
dt.deg.time = rbind(df.deg.p2,df.deg.p3,df.deg.p4,df.deg.p5,df.deg.p6,df.deg.p7)
length(unique(dt.deg.time$nodes))
length(dt.deg.time)
dim(dt.deg.time)
dim(dt.deg.time)[1]
sum(deg.dat.p2$degree)
deg.dat.p2$degree/sum(deg.dat.p2$degree)
unique(deg.dat.p2$degree/sum(deg.dat.p2$degree))
max(deg.dat.p2$degree/sum(deg.dat.p2$degree))
df.deg.p2$nodes[which(max(deg.dat.p2$degree/sum(deg.dat.p2$degree)))]
df.deg.p2$nodes[which.max(deg.dat.p2$degree/sum(deg.dat.p2$degree))]
which.max(deg.dat.p2$degree/sum(deg.dat.p2$degree))
plot(table(df.deg.p2$degree))
table(df.deg.p2$degree)
df.deg.p2$nodes[which(df.deg.p2$degree)==7]
df.deg.p2$nodes[which(df.deg.p2$degree==7)]
df.deg.p3$nodes[which(df.deg.p3$node="(455, 413)")]
df.deg.p3$nodes[which(df.deg.p3$node=="(455, 413)")]
df.deg.p3$nodes
df.deg.p4$nodes[which(df.deg.p4$node=="(455, 413)")]
df.deg.p3$nodes[which(df.deg.p3$node=="(634, 593)")]
identified_nodes_key = sort(unique(rbind(deg.dat.p2$node1,deg.dat.p2$node2)[2,]),decreasing=TRUE)
all.dat.p2 = read_excel("p2-fro_alldata.xlsx")
all.dat.p3 = read_excel("p3-fro_alldata.xlsx")
all.dat.p4 = read_excel("p4-fro_alldata.xlsx")
all.dat.p5 = read_excel("p5-fro_alldata.xlsx")
all.dat.p6 = read_excel("p6-fro_alldata.xlsx")
all.dat.p7 = read_excel("p7-fro_alldata.xlsx")
all.dat.p7.x0 = read_excel("p7-x 0_alldata.xlsx")
all.dat.N.129 = read_excel("N_129__alldata.xlsx")
identified_nodes_key = sort(unique(rbind(all.dat.p2$node1,all.dat.p2$node2)[2,]),decreasing=TRUE)
node1 = sort(all.dat.p2$node1,decreasing=TRUE)
node2 = sort(all.dat.p2$node2,decreasing=TRUE)
length(node1)
length(node2)
dim(all.dat.p2)
d = length(identified_nodes_key)
d
d
identified_nodes_key
d = length(identified_nodes_key)
d
net_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
net_mat[i,j] = 0
}
else{
net_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
net_mat[j,i] = length(node1[which(node1 == identified_nodes_key[j] & node2 == identified_nodes_key[i])])
}
j = j+1
}
print(i)
}
sum(net_mat)
length(node1)
d = length(identified_nodes_key)
d
net_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
net_mat[i,j] = 0
}
else{
net_mat[i,j] = sum(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
net_mat[j,i] = sum(node1[which(node1 == identified_nodes_key[j] & node2 == identified_nodes_key[i])])
}
j = j+1
}
print(i)
}
node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])
)
node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])]
node1[which(node1 == identified_nodes_key[1] & node2 == identified_nodes_key[1])]
node1[which(node1 == identified_nodes_key[1] & node2 == identified_nodes_key[2\])]
node1[which(node1 == identified_nodes_key[1] & node2 == identified_nodes_key[2])]
node1[which(node1 == identified_nodes_key[1] & node2 == identified_nodes_key[3])]
node1[which(node1 == identified_nodes_key[1] & node2 == identified_nodes_key[4])]
identified_nodes_key[1]
identified_nodes_key[2]
identified_nodes_key[3]
node1[which(node1 == identified_nodes_key[3] & node2 == identified_nodes_key[4])]
node1[which(node1 == identified_nodes_key[3] & node2 == identified_nodes_key[1])]
node1[which(node1 == identified_nodes_key[3] & node2 == identified_nodes_key[2])]
node1[which(node1 == identified_nodes_key[3] & node2 == identified_nodes_key[3])]
node1[which(node1 == identified_nodes_key[3] & node2 == identified_nodes_key[4])]
node1[which(node1 == identified_nodes_key[3] & node2 == identified_nodes_key[5])]
rowsum(net_mat)
?rowsum
library(base)
rowsum(net_mat)
?colsum
rowSums(net_mat)
View(net_mat)
d = length(identified_nodes_key)
d
net_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
net_mat[i,j] = 0
}
else{
net_mat[i,j] = sum(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
net_mat[j,i] = sum(node1[which(node1 == identified_nodes_key[j] & node2 == identified_nodes_key[i])])
}
j = j+1
}
print(i)
}
d = length(identified_nodes_key)
d
net_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
net_mat[i,j] = 0
}
else{
net_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
net_mat[j,i] = length(node1[which(node1 == identified_nodes_key[j] & node2 == identified_nodes_key[i])])
}
j = j+1
}
print(i)
}
sum(net_mat)
rowSums(net_mat)
colSums(net_mat)
max(colSums(net_mat))
all.dat.p7$nodespair[which(all.dat.p7$node1 == all.dat.p7$node2)]
all.dat.p7$nodespair[which(all.dat.p2$node1 == all.dat.p2$node2)]
colSums(net_mat) == 6
names(net_mat)[which(colSums(net_mat)==6)]
which(colSums(net_mat)==6)
View(all.dat.p2)
identified_nodes_key = sort(unique(rbind(all.dat.p2$node1,all.dat.p2$node2)[2,]),decreasing=TRUE)
node1 = sort(all.dat.p2$node1,decreasing=TRUE)
node2 = sort(all.dat.p2$node2,decreasing=TRUE)
length(node1)
length(node2)
d = length(identified_nodes_key)
d
net_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
net_mat[i,j] = 0
}
else{
net_mat[i,j] = length(node1[which(all.dat.p2$node1 == identified_nodes_key[i] & all.dat.p2$node2 == identified_nodes_key[j])])
net_mat[j,i] = length(node1[which(all.dat.p2$node1 == identified_nodes_key[j] & all.dat.p2$node2 == identified_nodes_key[i])])
}
j = j+1
}
print(i)
}
sum(net_mat)
max(colSum(net_mat))
max(colSums(net_mat))
max(rowSums(net_mat))
dt.deg.time = rbind(df.deg.p2,df.deg.p3,df.deg.p4,df.deg.p5,df.deg.p6,df.deg.p7)
length(unique(dt.deg.time$nodes))
dim(dt.deg.time)[1]
sum(deg.dat.p2$degree)
att.prob = deg.dat.p2$degree/sum(deg.dat.p2$degree)
df.deg.p2 = data.frame(nodes=deg.dat.p2$nodes,degree=deg.dat.p2$degree,time=2,
att.prob = deg.dat.p2$degree/sum(deg.dat.p2$degree))
df.deg.p3 = data.frame(nodes=deg.dat.p3$nodes,degree=deg.dat.p3$degree,time=3,
att.prob = deg.dat.p3$degree/sum(deg.dat.p3$degree))
df.deg.p4 = data.frame(nodes=deg.dat.p4$nodes,degree=deg.dat.p4$degree,time=4,
att.prob = deg.dat.p4$degree/sum(deg.dat.p4$degree))
df.deg.p5 = data.frame(nodes=deg.dat.p5$nodes,degree=deg.dat.p5$degree,time=5,
att.prob = deg.dat.p5$degree/sum(deg.dat.p5$degree))
df.deg.p6 = data.frame(nodes=deg.dat.p6$nodes,degree=deg.dat.p6$degree,time=6,
att.prob = deg.dat.p6$degree/sum(deg.dat.p6$degree))
df.deg.p7 = data.frame(nodes=deg.dat.p7$nodes,degree=deg.dat.p7$degree,time=7,
att.prob = deg.dat.p7$degree/sum(deg.dat.p7$degree))
dt.deg.time = rbind(df.deg.p2,df.deg.p3,df.deg.p4,df.deg.p5,df.deg.p6,df.deg.p7)
length(unique(dt.deg.time$nodes))
dim(dt.deg.time)[1]
df.deg.p2$nodes[which(df.deg.p2$degree==max(df.deg.p2$degree))]
library(tidyverse)
library(readxl)
library(igraph)
setwd("D:/STOR893-Zhang/vessel-network/feature_extraction/feature")
all.dat.p2 = read_excel("p2-fro_alldata.xlsx")
all.dat.p3 = read_excel("p3-fro_alldata.xlsx")
all.dat.p4 = read_excel("p4-fro_alldata.xlsx")
all.dat.p5 = read_excel("p5-fro_alldata.xlsx")
all.dat.p6 = read_excel("p6-fro_alldata.xlsx")
all.dat.p7 = read_excel("p7-fro_alldata.xlsx")
all.dat.p7.x0 = read_excel("p7-x 0_alldata.xlsx")
all.dat.N.129 = read_excel("N_129__alldata.xlsx")
deg.dat.p2 = read_excel("p2-fro_degreedata.xlsx")
deg.dat.p3 = read_excel("p3-fro_degreedata.xlsx")
deg.dat.p4 = read_excel("p4-fro_degreedata.xlsx")
deg.dat.p5 = read_excel("p5-fro_degreedata.xlsx")
deg.dat.p6 = read_excel("p6-fro_degreedata.xlsx")
deg.dat.p7 = read_excel("p7-fro_degreedata.xlsx")
deg.dat.p7.x0 = read_excel("p7-x 0_degreedata.xlsx")
deg.dat.N.129 = read_excel("N_129__degreedata.xlsx")
View(all.dat.p2)
View(deg.dat.p2)
sqrt((372-385)^2+(483-482)^2)
identified_nodes_key = sort(unique(rbind(all.dat.p2$node1,all.dat.p2$node2)[2,]),decreasing=TRUE)
node1 = sort(all.dat.p2$node1,decreasing=TRUE)
node2 = sort(all.dat.p2$node2,decreasing=TRUE)
length(node1)
length(node2)
node1
length(c(1:3))
d = length(identified_nodes_key)
d
net_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
net_mat[i,j] = 0
}
else{
net_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
net_mat[j,i] = length(node1[which(node1 == identified_nodes_key[j] & node2 == identified_nodes_key[i])])
}
j = j+1
}
print(i)
}
sum(net_mat)
length(node1)
length(node2)
d = length(identified_nodes_key)
d
net_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
net_mat[i,j] = 0
}
else{
net_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
net_mat[j,i] = length(node2[which(node1 == identified_nodes_key[j] & node2 == identified_nodes_key[i])])
}
j = j+1
}
print(i)
}
sum(net_mat)
View(net_mat)
d = length(identified_nodes_key)
d
Adj_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
for ( j in 1:d ){
if (i == j){
Adj_mat[i,j] = 0
}
else{
Adj_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
}
j = j+1
}
}
sum(Adj_mat)
View(Adj_mat)
d = length(identified_nodes_key)
d
Adj_mat = matrix(NA,nrow=d,ncol=d)
rownames(Adj_mat) = identified_nodes_key
colnames(Adj_mat = identified_nodes_key
for (i in 1:d){
for ( j in 1:d ){
if (i == j){
Adj_mat[i,j] = 0
}
else{
Adj_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
}
j = j+1
}
}
d = length(identified_nodes_key)
d
Adj_mat = matrix(NA,nrow=d,ncol=d)
rownames(Adj_mat) = identified_nodes_key
colnames(Adj_mat) = identified_nodes_key
for (i in 1:d){
for ( j in 1:d ){
if (i == j){
Adj_mat[i,j] = 0
}
else{
Adj_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
}
j = j+1
}
}
sum(Adj_mat)
d = length(identified_nodes_key)
d
Adj_mat = matrix(NA,nrow=d,ncol=d)
rownames(Adj_mat) = identified_nodes_key
colnames(Adj_mat) = identified_nodes_key
for (i in 1:d){
for ( j in 1:d ){
if (i == j){
Adj_mat[i,j] = 0
}
else{
Adj_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
}
}
}
sum(Adj_mat)
View(Adj_mat)
d = length(identified_nodes_key)
d
Adj_mat = matrix(NA,nrow=d,ncol=d)
rownames(net_mat) = identified_nodes_key
colnames(net_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
Adj_mat[i,j] = 0
}
else{
Adj_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
Adj_mat[j,i] = Adj_mat[i,j]
}
j = j+1
}
print(i)
}
sum(Adj_mat)
d
View(Adj_mat)
identified_nodes_key = sort(unique(rbind(all.dat.p2$node1,all.dat.p2$node2)[2,]),decreasing=TRUE)
node1 = sort(all.dat.p2$node1,decreasing=TRUE)
node2 = sort(all.dat.p2$node2,decreasing=TRUE)
length(node1)
length(node2)
d = length(identified_nodes_key)
d
Adj_mat = matrix(NA,nrow=d,ncol=d)
rownames(Adj_mat) = identified_nodes_key
colnames(Adj_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
Adj_mat[i,j] = 0
}
else{
Adj_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
Adj_mat[j,i] = Adj_mat[i,j]
}
j = j+1
}
print(i)
}
sum(Adj_mat)
G = graph_from_adjacency_matrix(Adj_mat,mode="undirected")
par(mar=c(0,0,0,0))
plot(G,vertex.label=NA,vertex.size=0.5,vertex.color="blue")
Cluster_betweeness = cluster_edge_betweenness(graph=G)
Cluster_walktrap = cluster_walktrap(graph=G)
sort(unique(Cluster_betweeness$membership),decreasing=FALSE)
sort(unique(Cluster_walktrap$membership),decreasing=FALSE)
plot(Cluster_betweeness,G,vertex.label=NA,vertex.size=5,layout=layout_as_star)
plot(Cluster_betweeness,G,vertex.label=NA,vertex.size=0.5)
plot(Cluster_walktrap,G,vertex.label=NA,vertex.size=0.5)
plot(Cluster_betweeness,G,vertex.label=NA,vertex.size=5)
plot(G,vertex.label=NA,vertex.size=5,vertex.color="blue")
Cluster_betweeness = cluster_edge_betweenness(graph=G)
Cluster_walktrap = cluster_walktrap(graph=G)
sort(unique(Cluster_betweeness$membership),decreasing=FALSE)
sort(unique(Cluster_walktrap$membership),decreasing=FALSE)
plot(Cluster_betweeness,G,vertex.label=NA,vertex.size=5)
plot(Cluster_walktrap,G,vertex.label=NA,vertex.size=5)
View(Adj_mat)
max(Adj_mat)
colSums(Adj_mat)
max(colSums(Adj_mat))
tt = colSums(Adj_mat)
tt[which(tt = max(colSums(Adj_mat)))]
tt[which(tt == max(colSums(Adj_mat))]
tt[which(tt == max(colSums(Adj_mat)))]
max(deg.dat.p2$degree)
deg.dat.p2$nodes[which(deg.dat.p2$degree == max(deg.dat.p2$degree))]
sum(Adj_mat)
max(colSums(Adj_mat))
max(deg.dat.p2$degree)
G = graph_from_adjacency_matrix(Adj_mat,mode="undirected")
par(mar=c(0,0,0,0))
plot(G,vertex.label=NA,vertex.size=5,vertex.color="blue")
identified_nodes_key = sort(unique(rbind(all.dat.N.129$node1,all.dat.N.129$node2)[2,]),decreasing=TRUE)
node1 = sort(all.dat.N.129$node1,decreasing=TRUE)
node2 = sort(all.dat.N.129$node2,decreasing=TRUE)
length(node1)
length(node2)
d = length(identified_nodes_key)
d
Adj_mat = matrix(NA,nrow=d,ncol=d)
rownames(Adj_mat) = identified_nodes_key
colnames(Adj_mat) = identified_nodes_key
for (i in 1:d){
j = 1;
while ( j <= i ){
if (i == j){
Adj_mat[i,j] = 0
}
else{
Adj_mat[i,j] = length(node1[which(node1 == identified_nodes_key[i] & node2 == identified_nodes_key[j])])
Adj_mat[j,i] = Adj_mat[i,j]
}
j = j+1
}
# Ticker: can be commentized
print(i)
}
sum(Adj_mat)
max(colSums(Adj_mat))
# max(deg.dat.p2$degree)
max(deg.dat.N.129$degree)
G = graph_from_adjacency_matrix(Adj_mat,mode="undirected")
par(mar=c(0,0,0,0))
plot(G,vertex.label=NA,vertex.size=5,vertex.color="blue")
plot(G,vertex.label=NA,vertex.size=0.5,vertex.color="blue")
plot(G,vertex.label=NA,vertex.size=1,vertex.color="blue")
Cluster_betweeness = cluster_edge_betweenness(graph=G)
Cluster_walktrap = cluster_walktrap(graph=G)
sort(unique(Cluster_betweeness$membership),decreasing=FALSE)
sort(unique(Cluster_walktrap$membership),decreasing=FALSE)
plot(Cluster_betweeness,G,vertex.label=NA,vertex.size=1)
plot(Cluster_walktrap,G,vertex.label=NA,vertex.size=1)
save.image("D:/STOR893-Zhang/vessel-network/network graph/Data.tmp.RData")
